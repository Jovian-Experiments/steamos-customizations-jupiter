#!/bin/bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4; -*-
# vim: et sts=4 sw=4

#  SPDX-License-Identifier: LGPL-2.1+
#
#  Copyright © 2019 Collabora Ltd.
#  Copyright © 2019 Valve Corporation.
#
#  This file is part of steamos-customizations.
#
#  steamos-customizations is free software; you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as published
#  by the Free Software Foundation; either version 2.1 of the License, or
#  (at your option) any later version.

set -eu;

export LC_ALL=C;
export LANG=C;

initrd=;
module_list=();
initrd_module_list=();
missing_module_list=();
uptodate_module_list=();
nvidia_module=;
dracut_conf=/etc/dracut.conf.d/99-nvidia-dkms.conf;

log ()
{
    local pfx="$1"; shift;

    if [ -t 1 ]; then pfx=''; fi;
    echo "$pfx$@";
}

info   () { log "<6>" "$@"; }
notice () { log "<5>" "$@"; echo "$@" > /dev/console; }
warn   () { log "<4>" "$@"; echo "$@" > /dev/console; }

get_initrd ()
{
    local ver="$1";
    local pkgbase="/usr/lib/modules/$(uname -r)/pkgbase";
    
    initrd=;
    if [ -e "$pkgbase" ];
    then
        initrd="/boot/initramfs-$(<"$pkgbase").img";
    else
	initrd="/boot/initrd.img-$ver";
    fi;
}

get_nvidia_module ()
{
    nvidia_module=;
    if [ -e /etc/arch-release ];
    then
        nvidia_module="nvidia";
    else
	nvidia_module="nvidia-current";
    fi;
}

get_module_list ()
{
    mapfile -t module_list < <(ls -1 "$1");
}

get_initrd_module_list ()
{
    mapfile -t initrd_module_list < <(lsinitrd "$1" | sed -n -E '/\.ko(\.xz)*$/s/.*\/(.*)$/\1/p');
}

get_missing_module_list() {
    local initrd="$1"; shift;

    get_initrd_module_list "$initrd";
    mapfile -t missing_module_list < <( \
        comm -13 <(printf "%s\n" "${initrd_module_list[@]}" | sort;) \
                 <(printf "%s\n" "$@"                       | sort;) \
    );
}

get_uptodate_module_list() {
    local initrd="$1"; shift;
    local modpath="$1"; shift;

    mapfile -t uptodate_module_list < <( \
        local mod;
        for mod in "$@";
        do
            if [ "$modpath/$mod" -nt "$initrd" ];
            then
                echo "$mod";
            fi;
        done;
    );
}

initrd_is_up_to_date ()
{
    local initrd="$1";  shift;
    local modpath="$1"; shift;

    get_missing_module_list "$initrd" "$@";
    if [ "${#missing_module_list[@]}" -ne 0 ];
    then
        info "Module list in $initrd incomplete:" "${missing_module_list[@]}";
        return 1;
    fi;

    get_uptodate_module_list "$initrd" "$modpath" "$@";
    if [ "${#uptodate_module_list[@]}" -ne 0 ];
    then
        info "Module list in $initrd is outdated:" "${uptodate_module_list[@]}";
        return 1;
    fi;
}

check_nvidia_dkms_modules ()
{
    local mod=;
    local ver=;
    local krn=;
    local arc=;
    local sta=;
    local xxx=;
    local modpath=;

    # get the module status
    get_nvidia_module;
    IFS="$IFS:," read mod ver krn arc sta xxx < <(dkms status "$nvidia_module");
    if [ -z "$sta" ]; then sta="$krn"; krn=; fi;

    # the module is not even added, quit!
    if [ -z "$ver" ];
    then
        info "$nvidia_module module is not added";
        return 1;
    fi;

    # the module is added or built but it is not installed though, install it!
    if [ "$sta" != "installed" ];
    then
        info "$nvidia_module module needs to be installed";
        dkms install "$mod/$ver";
        IFS="$IFS:," read mod ver krn arc sta xxx < <(dkms status "$nvidia_module");
        if [ -z "$sta" ]; then sta="$krn"; krn=; fi;
    fi;

    # the impossible happened, give up!
    if [ -z "$mod" ] || [ -z "$ver" ] || [ "$sta" != "installed" ];
    then
        info "$nvidia_module module is not installed";
        return 1;
    # try to recover anyway...
    elif [ -z "$krn" ] || [ -z "$arc" ];
    then
        krn="${krn:-$(uname -r)}";
        arc="${arc:-$(uname -m)}";
    fi;

    # the modules lives there
    modpath="/var/lib/dkms/$mod/$ver/$krn/$arc/module";
    get_module_list "$modpath";

    # regenerate the dracut configuration
    info "Adding modules ${module_list[*]} to dracut";
    echo "add_drivers+=\" ${module_list[*]%.ko*} \"" > "$dracut_conf";

    # the initrd is outdated, rebuild it!
    get_initrd "$ver";
    if ! initrd_is_up_to_date "$initrd" "$modpath" "${module_list[@]}"
    then
        notice "Rebuilding initrd to install $mod/$ver:" "${module_list[@]}";
        update-dracut;
    fi;

    # the module nvidia is not loaded, reboot!
    if ! grep -q '^nvidia' /proc/modules;
    then
        warn "Rebooting in 5 seconds...";
        sleep 5s;
        reboot;
    fi;
}

for mod in "$@";
do
    if [[ "$mod" =~ ^nvidia ]];
    then
        if ! check_nvidia_dkms_modules;
        then
            rm -f "${dracut_conf:-/etc/dracut.conf.d/no-such-file}";
        fi;
    fi;
done;
