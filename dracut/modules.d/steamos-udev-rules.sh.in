#!/bin/bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4; -*-
# vim: et sts=4 sw=4

#  SPDX-License-Identifier: LGPL-2.1+
#
#  Copyright © 2019-2021 Collabora Ltd.
#  Copyright © 2019-2021 Valve Corporation.
#
#  This file is part of steamos-customizations.
#
#  steamos-customizations is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public License as
#  published by the Free Software Foundation; either version 2.1 of the License,
#  or (at your option) any later version.

# Create udev rules for steamos partitions

. /lib/dracut-lib.sh

get_second_loader_device() {
    local partuuid
    local efivar
    local other
    local path
    local dev

    efivar="SecondLoaderDevicePartUUID-4a67b082-0a4c-41cf-b6c7-440b29bb8c4f"
    partuuid="$(cat "/sys/firmware/efi/efivars/$efivar" 2>/dev/null | \
                dd bs=1 skip=4 status=none | \
                iconv -t ASCII -f UTF-16LE | tr '\0' '\n')"
    if [[ "$partuuid" ]]
    then
        echo "PARTUUID=$partuuid"
        exit 0
    fi

    IFS=, mapfile -t cfgs < <(FS=, steamos-ls --output boot-requested-at,boot-other,boot-other-disabled,image-invalid,path "${opts[@]}" "$@" | sort -r)
    for i in "${cfgs[@]}"
    do
        local boot_requested_at
        local boot_other
        local boot_other_disabled
        local image_invalid

        IFS=, read -r boot_requested_at boot_other boot_other_disabled image_invalid path <<<"$i"

        if [[ "$boot_other" -ne 0 ]]
        then
            other=1
            echo "$path has boot-other set, skip it..." >&2
            continue
        fi

        if [[ "${other:-0}" -ne 0 ]] && [[ "$boot_other_disabled" -ne 0 ]]
        then
            echo "$path has boot-other-disabled set, skip it..." >&2
            continue
        fi

        if [[ "$image_invalid" -ne 0 ]]
        then
            echo "$path has image-invalid set, skip it..." >&2
            continue
        fi

        dev="$path"
        break
    done

    if [ ! "${dev:-}" ]
    then
        echo "Warning: No such device, assuming last if any..." >&2
        dev="$path"
    fi

    echo "$dev"
}

expand_dev() {
    local dev

    case "$1" in
    LABEL=*)
        dev="/dev/disk/by-label/${1#LABEL=}"
        ;;
    UUID=*)
        dev="${1#UUID=}"
        dev="/dev/disk/by-uuid/${dev,,}"
        ;;
    PARTUUID=*)
        dev="${1#PARTUUID=}"
        dev="/dev/disk/by-partuuid/${dev,,}"
        ;;
    PARTLABEL=*)
        dev="/dev/disk/by-partlabel/${1#PARTLABEL=}"
        ;;
    *)
        dev="$1"
        ;;
    esac

    echo "$dev"
}

# Main

info "Setting up SteamOS udev rules"

EFI=$(getarg 'rd.steamos.efi=')
if [ -z "$EFI" ]; then
    EFI=$(getarg 'steamos.efi=')
fi
if [ -z "$EFI" ]; then
    EFI="$(get_second_loader_device)"
fi
if [ -z "$EFI" ]; then
    exit 0
fi

info "Mounting $EFI with -o ro"
EFI="$(expand_dev "$EFI")"
mount -o ro "$EFI" /mnt 2>&1 | vinfo
trap "if ismounted /mnt; then umount /mnt; fi" 0
if ! ismounted /mnt; then
    warn "Mounting $EFI failed!"
    warn "*** Dropping you to a shell; the system will continue"
    warn "*** when you leave the shell."
    emergency_shell
fi

for partset in /mnt/@partsets_reldir@/*; do
    [ -e "$partset" ] || continue
    @libexecdir@/steamos/steamos-partsets-generator "$partset"
done

udevadm control --reload-rules && udevadm trigger --settle
